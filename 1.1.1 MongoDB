
Prerequisites:

npm install mongoose



MongoDB Schema Design:

const { MongoClient } = require('mongodb');
const { ObjectId } = require('mongodb');

// MongoDB connection URI
const uri = 'your-mongodb-uri';
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

async function createSampleData() {
  try {
    await client.connect();
    console.log('Connected to MongoDB');

    // Create or get a reference to the blog database
    const database = client.db('blog');

    // Define the User, Post, and Comment collections
    const usersCollection = database.collection('users');
    const postsCollection = database.collection('posts');
    const commentsCollection = database.collection('comments');

    // Clear existing data for demonstration purposes
    await usersCollection.deleteMany({});
    await postsCollection.deleteMany({});
    await commentsCollection.deleteMany({});

    // Sample data
    const sampleUser = {
      username: 'john_doe',
      email: 'john@example.com',
      fullName: 'John Doe',
    };

    const samplePost = {
      title: 'Introduction to MongoDB Schema Design',
      content: 'This is a blog post about MongoDB schema design.',
      author: ObjectId('userObjectId'), // Reference to a user
    };

    const sampleComment = {
      text: 'Great post!',
      author: ObjectId('userObjectId'), // Reference to a user
      post: ObjectId('postObjectId'), // Reference to a post
    };

    // Insert sample user
    const userResult = await usersCollection.insertOne(sampleUser);
    const userId = userResult.insertedId;

    // Update post with the correct user reference
    samplePost.author = userId;

    // Insert sample post
    const postResult = await postsCollection.insertOne(samplePost);
    const postId = postResult.insertedId;

    // Update comment with the correct user and post references
    sampleComment.author = userId;
    sampleComment.post = postId;

    // Insert sample comment
    await commentsCollection.insertOne(sampleComment);

    console.log('Sample data inserted successfully');
  } finally {
    await client.close();
    console.log('Connection to MongoDB closed');
  }
}

// Call the function to create sample data
createSampleData();



MongoDB Schema Design:

const mongoose = require('mongoose');

// MongoDB connection URI
const uri = 'your-mongodb-uri';
mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true });

// Define User schema
const userSchema = new mongoose.Schema({
  username: { type: String, unique: true, required: true },
  email: { type: String, unique: true, required: true },
  fullName: { type: String, required: true },
  created_at: { type: Date, default: Date.now },
});

// Define Post schema
const postSchema = new mongoose.Schema({
  title: { type: String, required: true },
  content: { type: String, required: true },
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  created_at: { type: Date, default: Date.now },
});

// Define Comment schema
const commentSchema = new mongoose.Schema({
  text: { type: String, required: true },
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  post: { type: mongoose.Schema.Types.ObjectId, ref: 'Post', required: true },
  created_at: { type: Date, default: Date.now },
});

// Define models
const User = mongoose.model('User', userSchema);
const Post = mongoose.model('Post', postSchema);
const Comment = mongoose.model('Comment', commentSchema);

// Sample data
async function createSampleData() {
  try {
    // Clear existing data for demonstration purposes
    await User.deleteMany({});
    await Post.deleteMany({});
    await Comment.deleteMany({});

    // Create sample user
    const user = await User.create({
      username: 'john_doe',
      email: 'john@example.com',
      fullName: 'John Doe',
    });

    // Create sample post
    const post = await Post.create({
      title: 'Introduction to MongoDB Schema Design',
      content: 'This is a blog post about MongoDB schema design.',
      author: user._id,
    });

    // Create sample comment
    await Comment.create({
      text: 'Great post!',
      author: user._id,
      post: post._id,
    });

    console.log('Sample data inserted successfully');
  } catch (error) {
    console.error('Error inserting sample data:', error);
  } finally {
    // Close the connection after sample data insertion
    mongoose.connection.close();
    console.log('Connection to MongoDB closed');
  }
}

// Call the function to create sample data
createSampleData();


...........................................................................................................................................................................
   
  Explanation: 

Connection to MongoDB:
The code establishes a connection to MongoDB using the MongoClient.

Collections:
Collections for users, posts, and comments are defined within the blog database.

Sample Data:
The code creates sample data for a user, a post, and a comment.
The user is referenced in both the post and the comment.

Object IDs:
MongoDB uses ObjectId for unique identifiers. These are generated automatically.

Inserting Data:
The sample data is inserted into their respective collections.

Relationships:
The author field in the post and comment entities is a reference to a user.
The post field in the comment entity is a reference to a post.

Connection to MongoDB:
The code connects to MongoDB using Mongoose.

Schemas:
separate schemas are defined for User, Post, and Comment.

Fields and Relationships:
Fields like created_at are added to track the creation timestamp.
Relationships are established using mongoose.Schema.Types.ObjectId and the ref property.

Models:
Mongoose models are created for User, Post, and Comment based on their respective schemas.

Sample Data:
The createSampleData function inserts a sample user, post, and comment into their respective collections.

Close Connection:
After inserting sample data, the connection to MongoDB is closed.

